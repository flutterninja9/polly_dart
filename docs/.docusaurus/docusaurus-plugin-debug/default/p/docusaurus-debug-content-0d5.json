{"allContent":{"docusaurus-plugin-content-docs":{"default":{"loadedVersions":[{"versionName":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","path":"/","tagsPath":"/tags","editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs","editUrlLocalized":"https://github.com/flutterninja9/polly_dart/tree/main/docs/i18n/en/docusaurus-plugin-content-docs/current","isLast":true,"routePriority":-1,"sidebarFilePath":"/Users/anirudhsingh/polly_dart/docs/sidebars.js","contentPath":"/Users/anirudhsingh/polly_dart/docs/docs","contentPathLocalized":"/Users/anirudhsingh/polly_dart/docs/i18n/en/docusaurus-plugin-content-docs/current","docs":[{"id":"advanced/combining-strategies","title":"Combining Strategies","description":"One of Polly Dart's most powerful features is the ability to combine multiple resilience strategies into a single pipeline. This creates layered defense mechanisms that work together to handle different types of failures and optimize performance.","source":"@site/docs/advanced/combining-strategies.md","sourceDirName":"advanced","slug":"/advanced/combining-strategies","permalink":"/advanced/combining-strategies","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/advanced/combining-strategies.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Rate Limiter Strategy","permalink":"/strategies/rate-limiter"},"next":{"title":"Custom Strategies","permalink":"/advanced/custom-strategies"}},{"id":"advanced/custom-strategies","title":"Custom Strategies","description":"While Polly Dart provides six comprehensive built-in strategies, you might need to create custom strategies for specific scenarios. This guide shows you how to build your own resilience strategies that integrate seamlessly with the Polly Dart pipeline.","source":"@site/docs/advanced/custom-strategies.md","sourceDirName":"advanced","slug":"/advanced/custom-strategies","permalink":"/advanced/custom-strategies","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/advanced/custom-strategies.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Combining Strategies","permalink":"/advanced/combining-strategies"},"next":{"title":"Monitoring and Observability","permalink":"/advanced/monitoring"}},{"id":"advanced/monitoring","title":"Monitoring and Observability","description":"Monitoring your resilience strategies is crucial for understanding system behavior, identifying bottlenecks, and optimizing performance. This guide covers comprehensive monitoring approaches for Polly Dart applications.","source":"@site/docs/advanced/monitoring.md","sourceDirName":"advanced","slug":"/advanced/monitoring","permalink":"/advanced/monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/advanced/monitoring.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Custom Strategies","permalink":"/advanced/custom-strategies"},"next":{"title":"Testing Resilience Strategies","permalink":"/advanced/testing"}},{"id":"advanced/testing","title":"Testing Resilience Strategies","description":"Testing resilience strategies is crucial for ensuring your applications behave correctly under failure conditions. This comprehensive guide covers testing approaches from unit tests to chaos engineering.","source":"@site/docs/advanced/testing.md","sourceDirName":"advanced","slug":"/advanced/testing","permalink":"/advanced/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/advanced/testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Monitoring and Observability","permalink":"/advanced/monitoring"},"next":{"title":"ResiliencePipeline","permalink":"/api/resilience-pipeline"}},{"id":"api/circuit-breaker-strategy","title":"CircuitBreakerStrategy","description":"The CircuitBreakerStrategy prevents cascading failures by monitoring failure rates and temporarily blocking calls when thresholds are exceeded.","source":"@site/docs/api/circuit-breaker-strategy.md","sourceDirName":"api","slug":"/api/circuit-breaker-strategy","permalink":"/api/circuit-breaker-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/circuit-breaker-strategy.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"RetryStrategy","permalink":"/api/retry-strategy"},"next":{"title":"TimeoutStrategy","permalink":"/api/timeout-strategy"}},{"id":"api/fallback-strategy","title":"FallbackStrategy","description":"The FallbackStrategy provides alternative responses when operations fail, ensuring graceful degradation and improved user experience.","source":"@site/docs/api/fallback-strategy.md","sourceDirName":"api","slug":"/api/fallback-strategy","permalink":"/api/fallback-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/fallback-strategy.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"TimeoutStrategy","permalink":"/api/timeout-strategy"},"next":{"title":"HedgingStrategy","permalink":"/api/hedging-strategy"}},{"id":"api/hedging-strategy","title":"HedgingStrategy","description":"The HedgingStrategy improves performance by executing multiple parallel attempts and returning the first successful result, reducing latency caused by slow responses.","source":"@site/docs/api/hedging-strategy.md","sourceDirName":"api","slug":"/api/hedging-strategy","permalink":"/api/hedging-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/hedging-strategy.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"FallbackStrategy","permalink":"/api/fallback-strategy"},"next":{"title":"RateLimiterStrategy","permalink":"/api/rate-limiter-strategy"}},{"id":"api/outcome","title":"Outcome","description":"The Outcome class represents the result of a resilience pipeline execution, containing either a successful result or exception information.","source":"@site/docs/api/outcome.md","sourceDirName":"api","slug":"/api/outcome","permalink":"/api/outcome","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/outcome.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"ResilienceContext","permalink":"/api/resilience-context"},"next":{"title":"RetryStrategy","permalink":"/api/retry-strategy"}},{"id":"api/rate-limiter-strategy","title":"RateLimiterStrategy","description":"The RateLimiterStrategy controls the rate of operations to prevent system overload and ensure fair resource usage.","source":"@site/docs/api/rate-limiter-strategy.md","sourceDirName":"api","slug":"/api/rate-limiter-strategy","permalink":"/api/rate-limiter-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/rate-limiter-strategy.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"HedgingStrategy","permalink":"/api/hedging-strategy"},"next":{"title":"HTTP Client with Resilience","permalink":"/examples/http-client"}},{"id":"api/resilience-context","title":"ResilienceContext","description":"The ResilienceContext class provides contextual information and state management throughout the execution of a resilience pipeline.","source":"@site/docs/api/resilience-context.md","sourceDirName":"api","slug":"/api/resilience-context","permalink":"/api/resilience-context","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/resilience-context.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"ResiliencePipelineBuilder","permalink":"/api/resilience-pipeline-builder"},"next":{"title":"Outcome","permalink":"/api/outcome"}},{"id":"api/resilience-pipeline","title":"ResiliencePipeline","description":"The ResiliencePipeline class is the core execution engine that combines multiple resilience strategies into a cohesive resilience solution.","source":"@site/docs/api/resilience-pipeline.md","sourceDirName":"api","slug":"/api/resilience-pipeline","permalink":"/api/resilience-pipeline","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/resilience-pipeline.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Testing Resilience Strategies","permalink":"/advanced/testing"},"next":{"title":"ResiliencePipelineBuilder","permalink":"/api/resilience-pipeline-builder"}},{"id":"api/resilience-pipeline-builder","title":"ResiliencePipelineBuilder","description":"The ResiliencePipelineBuilder class provides a fluent API for constructing resilience pipelines with multiple strategies.","source":"@site/docs/api/resilience-pipeline-builder.md","sourceDirName":"api","slug":"/api/resilience-pipeline-builder","permalink":"/api/resilience-pipeline-builder","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/resilience-pipeline-builder.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"ResiliencePipeline","permalink":"/api/resilience-pipeline"},"next":{"title":"ResilienceContext","permalink":"/api/resilience-context"}},{"id":"api/retry-strategy","title":"RetryStrategy","description":"The RetryStrategy provides automatic retry functionality for transient failures with configurable backoff strategies.","source":"@site/docs/api/retry-strategy.md","sourceDirName":"api","slug":"/api/retry-strategy","permalink":"/api/retry-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/retry-strategy.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Outcome","permalink":"/api/outcome"},"next":{"title":"CircuitBreakerStrategy","permalink":"/api/circuit-breaker-strategy"}},{"id":"api/timeout-strategy","title":"TimeoutStrategy","description":"The TimeoutStrategy cancels operations that exceed a specified time limit, preventing resource exhaustion and improving system responsiveness.","source":"@site/docs/api/timeout-strategy.md","sourceDirName":"api","slug":"/api/timeout-strategy","permalink":"/api/timeout-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/api/timeout-strategy.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"CircuitBreakerStrategy","permalink":"/api/circuit-breaker-strategy"},"next":{"title":"FallbackStrategy","permalink":"/api/fallback-strategy"}},{"id":"examples/http-client","title":"HTTP Client with Resilience","description":"This example demonstrates how to build a robust HTTP client using Polly Dart resilience strategies. We'll create a client that handles network failures, service outages, and slow responses gracefully.","source":"@site/docs/examples/http-client.md","sourceDirName":"examples","slug":"/examples/http-client","permalink":"/examples/http-client","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/examples/http-client.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"RateLimiterStrategy","permalink":"/api/rate-limiter-strategy"}},{"id":"getting-started/basic-concepts","title":"Basic Concepts","description":"Understanding the fundamental concepts behind Polly Dart will help you build more effective resilience strategies and debug issues when they arise.","source":"@site/docs/getting-started/basic-concepts.md","sourceDirName":"getting-started","slug":"/getting-started/basic-concepts","permalink":"/getting-started/basic-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/getting-started/basic-concepts.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start","permalink":"/getting-started/quick-start"},"next":{"title":"Resilience Strategies Overview","permalink":"/strategies/overview"}},{"id":"getting-started/installation","title":"Installation","description":"Get Polly Dart up and running in your Dart or Flutter project in just a few steps.","source":"@site/docs/getting-started/installation.md","sourceDirName":"getting-started","slug":"/getting-started/installation","permalink":"/getting-started/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/getting-started/installation.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Welcome to Polly Dart","permalink":"/intro"},"next":{"title":"Quick Start","permalink":"/getting-started/quick-start"}},{"id":"getting-started/quick-start","title":"Quick Start","description":"Learn the basics of Polly Dart with hands-on examples. In 5 minutes, you'll understand how to build resilient applications with minimal code changes.","source":"@site/docs/getting-started/quick-start.md","sourceDirName":"getting-started","slug":"/getting-started/quick-start","permalink":"/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/getting-started/quick-start.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/getting-started/installation"},"next":{"title":"Basic Concepts","permalink":"/getting-started/basic-concepts"}},{"id":"index","title":"Polly Dart","description":"Welcome to Polly Dart!","source":"@site/docs/index.md","sourceDirName":".","slug":"/","permalink":"/","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/index.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"slug":"/","title":"Polly Dart","sidebar_position":0}},{"id":"intro","title":"Welcome to Polly Dart","description":"Polly Dart is a comprehensive resilience and transient-fault-handling library for Dart applications. Inspired by the .NET Polly library, it provides developers with powerful tools to handle failures gracefully and build robust applications.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Installation","permalink":"/getting-started/installation"}},{"id":"strategies/circuit-breaker","title":"Circuit Breaker Strategy","description":"The Circuit Breaker Strategy protects your application from cascading failures by monitoring the health of external dependencies and temporarily blocking calls when they're failing. Like an electrical circuit breaker, it \"opens\" to stop the flow when problems are detected.","source":"@site/docs/strategies/circuit-breaker.md","sourceDirName":"strategies","slug":"/strategies/circuit-breaker","permalink":"/strategies/circuit-breaker","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/strategies/circuit-breaker.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Retry Strategy","permalink":"/strategies/retry"},"next":{"title":"Timeout Strategy","permalink":"/strategies/timeout"}},{"id":"strategies/fallback","title":"Fallback Strategy","description":"The Fallback Strategy provides alternative responses when primary operations fail, enabling graceful degradation instead of complete failure. It's your safety net for maintaining user experience even when services are unavailable.","source":"@site/docs/strategies/fallback.md","sourceDirName":"strategies","slug":"/strategies/fallback","permalink":"/strategies/fallback","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/strategies/fallback.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Timeout Strategy","permalink":"/strategies/timeout"},"next":{"title":"Hedging Strategy","permalink":"/strategies/hedging"}},{"id":"strategies/hedging","title":"Hedging Strategy","description":"The Hedging Strategy launches multiple parallel operations against the same resource and returns the result from whichever completes first. This proactive approach reduces tail latency and improves response times when some requests may be slower than others.","source":"@site/docs/strategies/hedging.md","sourceDirName":"strategies","slug":"/strategies/hedging","permalink":"/strategies/hedging","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/strategies/hedging.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Fallback Strategy","permalink":"/strategies/fallback"},"next":{"title":"Rate Limiter Strategy","permalink":"/strategies/rate-limiter"}},{"id":"strategies/overview","title":"Resilience Strategies Overview","description":"Polly Dart provides six core resilience strategies that can be combined to build robust applications. Each strategy addresses specific failure scenarios and can be configured to match your application's needs.","source":"@site/docs/strategies/overview.md","sourceDirName":"strategies","slug":"/strategies/overview","permalink":"/strategies/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/strategies/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Basic Concepts","permalink":"/getting-started/basic-concepts"},"next":{"title":"Retry Strategy","permalink":"/strategies/retry"}},{"id":"strategies/rate-limiter","title":"Rate Limiter Strategy","description":"The Rate Limiter Strategy controls the rate of execution to prevent overwhelming resources and ensure fair usage. It acts as a traffic control system, queuing or rejecting requests when limits are exceeded, protecting both your application and downstream services.","source":"@site/docs/strategies/rate-limiter.md","sourceDirName":"strategies","slug":"/strategies/rate-limiter","permalink":"/strategies/rate-limiter","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/strategies/rate-limiter.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Hedging Strategy","permalink":"/strategies/hedging"},"next":{"title":"Combining Strategies","permalink":"/advanced/combining-strategies"}},{"id":"strategies/retry","title":"Retry Strategy","description":"The Retry Strategy automatically retries failed operations, making your application more resilient to transient failures like network hiccups, temporary service unavailability, or resource contention.","source":"@site/docs/strategies/retry.md","sourceDirName":"strategies","slug":"/strategies/retry","permalink":"/strategies/retry","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/strategies/retry.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Resilience Strategies Overview","permalink":"/strategies/overview"},"next":{"title":"Circuit Breaker Strategy","permalink":"/strategies/circuit-breaker"}},{"id":"strategies/timeout","title":"Timeout Strategy","description":"The Timeout Strategy prevents operations from running indefinitely by cancelling them after a specified duration. This is crucial for maintaining responsive applications and preventing resource exhaustion.","source":"@site/docs/strategies/timeout.md","sourceDirName":"strategies","slug":"/strategies/timeout","permalink":"/strategies/timeout","draft":false,"unlisted":false,"editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/docs/strategies/timeout.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Circuit Breaker Strategy","permalink":"/strategies/circuit-breaker"},"next":{"title":"Fallback Strategy","permalink":"/strategies/fallback"}}],"drafts":[],"sidebars":{"tutorialSidebar":[{"type":"doc","id":"intro"},{"type":"category","label":"Getting Started","items":[{"type":"doc","id":"getting-started/installation"},{"type":"doc","id":"getting-started/quick-start"},{"type":"doc","id":"getting-started/basic-concepts"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Resilience Strategies","items":[{"type":"doc","id":"strategies/overview"},{"type":"doc","id":"strategies/retry"},{"type":"doc","id":"strategies/circuit-breaker"},{"type":"doc","id":"strategies/timeout"},{"type":"doc","id":"strategies/fallback"},{"type":"doc","id":"strategies/hedging"},{"type":"doc","id":"strategies/rate-limiter"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced Topics","items":[{"type":"doc","id":"advanced/combining-strategies"},{"type":"doc","id":"advanced/custom-strategies"},{"type":"doc","id":"advanced/monitoring"},{"type":"doc","id":"advanced/testing"}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"doc","id":"api/resilience-pipeline"},{"type":"doc","id":"api/resilience-pipeline-builder"},{"type":"doc","id":"api/resilience-context"},{"type":"doc","id":"api/outcome"},{"type":"doc","id":"api/retry-strategy"},{"type":"doc","id":"api/circuit-breaker-strategy"},{"type":"doc","id":"api/timeout-strategy"},{"type":"doc","id":"api/fallback-strategy"},{"type":"doc","id":"api/hedging-strategy"},{"type":"doc","id":"api/rate-limiter-strategy"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Examples","items":[{"type":"doc","id":"examples/http-client"}],"collapsed":true,"collapsible":true}]}}]}},"docusaurus-plugin-content-blog":{"default":{"blogSidebarTitle":"Recent posts","blogPosts":[{"id":"introducing-polly-dart","metadata":{"permalink":"/blog/introducing-polly-dart","editUrl":"https://github.com/flutterninja9/polly_dart/tree/main/docs/blog/2025-08-15-introducing-polly-dart.md","source":"@site/blog/2025-08-15-introducing-polly-dart.md","title":"Introducing Polly Dart - Resilience for the Dart Ecosystem","description":"Today, I'm excited to announce Polly Dart - a comprehensive resilience and transient-fault-handling library for Dart applications. Inspired by the battle-tested .NET Polly library, Polly Dart brings enterprise-grade resilience patterns to the Dart ecosystem.","date":"2025-08-15T00:00:00.000Z","tags":[{"inline":true,"label":"dart","permalink":"/blog/tags/dart"},{"inline":true,"label":"flutter","permalink":"/blog/tags/flutter"},{"inline":true,"label":"resilience","permalink":"/blog/tags/resilience"},{"inline":true,"label":"reliability","permalink":"/blog/tags/reliability"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":4.5,"hasTruncateMarker":true,"authors":[{"name":"Anirudh Singh","title":"Creator of Polly Dart","url":"https://github.com/flutterninja9","imageURL":"https://github.com/flutterninja9.png","key":"anirudh_singh","page":null}],"frontMatter":{"slug":"introducing-polly-dart","title":"Introducing Polly Dart - Resilience for the Dart Ecosystem","authors":["anirudh_singh"],"tags":["dart","flutter","resilience","reliability","announcement"]},"unlisted":false},"content":"Today, I'm excited to announce **Polly Dart** - a comprehensive resilience and transient-fault-handling library for Dart applications. Inspired by the battle-tested .NET [Polly library](https://github.com/App-vNext/Polly), Polly Dart brings enterprise-grade resilience patterns to the Dart ecosystem.\n\n## Why Resilience Matters More Than Ever\n\nIn our interconnected world, applications depend on numerous external services, APIs, databases, and resources. Network hiccups, service outages, and resource contention are not exceptions—they're inevitable realities. The question isn't whether your application will encounter failures, but how gracefully it will handle them.\n\nConsider these common scenarios:\n- A mobile app loses network connectivity while syncing data\n- A Flutter web app calls an API that's temporarily overwhelmed\n- A Dart server application hits database connection limits\n- A microservice times out due to unexpected load\n\nWithout proper resilience strategies, these situations lead to poor user experiences, data loss, and system instability.\n\n<!--truncate-->\n\n## The Polly Dart Solution\n\nPolly Dart provides six core resilience strategies that can be combined to create robust, fault-tolerant applications:\n\n### 🔄 Reactive Strategies\n- **Retry**: Automatically retry failed operations with intelligent backoff\n- **Circuit Breaker**: Prevent cascading failures by blocking calls to failing services  \n- **Fallback**: Provide alternative responses when operations fail\n- **Hedging**: Execute multiple parallel attempts for optimized response times\n\n### ⚡ Proactive Strategies\n- **Timeout**: Cancel operations that take too long\n- **Rate Limiter**: Control operation rate and manage concurrency\n\n## Design Principles\n\nWhen creating Polly Dart, I focused on several key principles:\n\n### 1. Developer Experience First\nResilience shouldn't require complex boilerplate code. Polly Dart uses a fluent builder pattern that makes creating resilience policies intuitive and readable:\n\n```dart\nfinal pipeline = ResiliencePipelineBuilder()\n    .addRetry(RetryStrategyOptions(maxRetryAttempts: 3))\n    .addCircuitBreaker(CircuitBreakerStrategyOptions(failureRatio: 0.5))\n    .addTimeout(Duration(seconds: 30))\n    .addFallback(FallbackStrategyOptions.withValue('Cached data'))\n    .build();\n\n// Clean, declarative resilience\nfinal result = await pipeline.execute(() => apiCall());\n```\n\n### 2. Composability and Flexibility\nStrategies can be combined in any order to create sophisticated resilience pipelines. Each strategy focuses on a specific concern, making the system both powerful and maintainable.\n\n### 3. Type Safety and Performance\nBuilt with Dart's strong type system, Polly Dart provides compile-time safety while maintaining excellent runtime performance. Strategies only activate when needed, keeping overhead minimal.\n\n### 4. Observability Built-In\nEvery strategy includes comprehensive callbacks for monitoring, logging, and metrics collection:\n\n```dart\n.addRetry(RetryStrategyOptions(\n  onRetry: (args) async {\n    logger.info('Retrying operation, attempt ${args.attemptNumber + 1}');\n    metrics.incrementCounter('retry_attempts');\n  },\n))\n```\n\n## Real-World Impact\n\nLet me show you how Polly Dart transforms code from fragile to resilient:\n\n### Before: Fragile HTTP Client\n```dart\nclass ApiClient {\n  Future<User> getUser(int id) async {\n    final response = await httpClient.get('/users/$id');\n    return User.fromJson(response.data);\n    // What if the network fails? What if the server is slow?\n    // What if the service is temporarily down?\n  }\n}\n```\n\n### After: Resilient HTTP Client\n```dart\nclass ResilientApiClient {\n  final _pipeline = ResiliencePipelineBuilder()\n      .addRetry(RetryStrategyOptions(\n        maxRetryAttempts: 3,\n        backoffType: DelayBackoffType.exponential,\n        shouldHandle: (outcome) => isTransientError(outcome),\n      ))\n      .addCircuitBreaker(CircuitBreakerStrategyOptions(\n        failureRatio: 0.5,\n        breakDuration: Duration(seconds: 30),\n      ))\n      .addTimeout(Duration(seconds: 15))\n      .addFallback(FallbackStrategyOptions(\n        fallbackAction: (args) => getCachedUser(id),\n      ))\n      .build();\n\n  Future<User> getUser(int id) async {\n    return await _pipeline.execute((context) async {\n      final response = await httpClient.get('/users/$id');\n      return User.fromJson(response.data);\n    });\n    // Now handles network failures, slow responses, service outages,\n    // and provides graceful fallbacks - all transparently!\n  }\n}\n```\n\n## Platform Support\n\nPolly Dart works across the entire Dart ecosystem:\n\n- **Flutter Mobile** (iOS, Android)\n- **Flutter Web**\n- **Flutter Desktop** (Windows, macOS, Linux)\n- **Dart Server** applications\n- **Dart CLI** tools\n\nThe same resilience patterns work consistently across all platforms, making it easy to share code and expertise across your entire stack.\n\n## Learning from Production Experience\n\nThe patterns implemented in Polly Dart aren't theoretical—they're proven solutions that have helped organizations handle billions of requests reliably. The .NET Polly library has been battle-tested in production environments ranging from small startups to Fortune 500 companies.\n\nBy bringing these patterns to Dart, we're enabling the Flutter and Dart communities to build applications with the same level of resilience that enterprise systems depend on.\n\n## Getting Started\n\nAdding resilience to your Dart application is straightforward:\n\n```bash\ndart pub add polly_dart\n```\n\nThen start with a simple retry policy and gradually add more strategies as needed:\n\n```dart\nimport 'package:polly_dart/polly_dart.dart';\n\nfinal pipeline = ResiliencePipelineBuilder()\n    .addRetry()\n    .addTimeout(Duration(seconds: 30))\n    .build();\n\nfinal result = await pipeline.execute(() => yourOperation());\n```\n\n## What's Next\n\nThis initial release includes all six core resilience strategies with comprehensive configuration options. Future releases will focus on:\n\n- **Additional strategies** (bulkhead isolation, hedging variants)\n- **Performance optimizations** \n- **Enhanced monitoring** capabilities\n- **Integration guides** for popular Dart/Flutter packages\n- **Community feedback** and feature requests\n\n## Community and Contribution\n\nPolly Dart is open source and welcomes community contributions. Whether you're reporting bugs, suggesting features, improving documentation, or contributing code, your involvement helps make the Dart ecosystem more resilient.\n\n- **GitHub**: [github.com/flutterninja9/polly_dart](https://github.com/flutterninja9/polly_dart)\n- **Documentation**: [polly-dart.dev](https://flutterninja9.github.io/polly_dart/)\n- **Package**: [pub.dev/packages/polly_dart](https://pub.dev/packages/polly_dart)\n\n## Acknowledgments\n\nSpecial thanks to the .NET Polly community for pioneering these resilience patterns and creating comprehensive documentation that guided this implementation. Their work has helped countless developers build more reliable systems.\n\n## Build Resilient Applications Today\n\nFailures are inevitable, but with Polly Dart, they don't have to be catastrophic. Start building more resilient Dart and Flutter applications today, and give your users the reliable experience they deserve.\n\nTry Polly Dart in your next project and see how easy it is to add enterprise-grade resilience to your applications. Your users (and your on-call schedule) will thank you.\n\n---\n\n*Have questions or feedback? [Open a discussion](https://github.com/flutterninja9/polly_dart/discussions) on GitHub or reach out on social media. I'd love to hear about how you're using Polly Dart in your projects!*"}],"blogListPaginated":[{"items":["introducing-polly-dart"],"metadata":{"permalink":"/blog","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Blog","blogTitle":"Blog"}}],"blogTags":{"/blog/tags/dart":{"inline":true,"label":"dart","permalink":"/blog/tags/dart","items":["introducing-polly-dart"],"pages":[{"items":["introducing-polly-dart"],"metadata":{"permalink":"/blog/tags/dart","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Blog","blogTitle":"Blog"}}],"unlisted":false},"/blog/tags/flutter":{"inline":true,"label":"flutter","permalink":"/blog/tags/flutter","items":["introducing-polly-dart"],"pages":[{"items":["introducing-polly-dart"],"metadata":{"permalink":"/blog/tags/flutter","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Blog","blogTitle":"Blog"}}],"unlisted":false},"/blog/tags/resilience":{"inline":true,"label":"resilience","permalink":"/blog/tags/resilience","items":["introducing-polly-dart"],"pages":[{"items":["introducing-polly-dart"],"metadata":{"permalink":"/blog/tags/resilience","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Blog","blogTitle":"Blog"}}],"unlisted":false},"/blog/tags/reliability":{"inline":true,"label":"reliability","permalink":"/blog/tags/reliability","items":["introducing-polly-dart"],"pages":[{"items":["introducing-polly-dart"],"metadata":{"permalink":"/blog/tags/reliability","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Blog","blogTitle":"Blog"}}],"unlisted":false},"/blog/tags/announcement":{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement","items":["introducing-polly-dart"],"pages":[{"items":["introducing-polly-dart"],"metadata":{"permalink":"/blog/tags/announcement","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Blog","blogTitle":"Blog"}}],"unlisted":false}},"blogTagsListPath":"/blog/tags","authorsMap":{"anirudh_singh":{"name":"Anirudh Singh","title":"Creator of Polly Dart","url":"https://github.com/flutterninja9","imageURL":"https://github.com/flutterninja9.png","key":"anirudh_singh","page":null}}}},"docusaurus-plugin-content-pages":{"default":[]},"docusaurus-plugin-debug":{},"docusaurus-plugin-svgr":{},"docusaurus-theme-classic":{},"docusaurus-theme-search-algolia":{},"docusaurus-theme-mermaid":{},"docusaurus-bootstrap-plugin":{},"docusaurus-mdx-fallback-plugin":{}}}